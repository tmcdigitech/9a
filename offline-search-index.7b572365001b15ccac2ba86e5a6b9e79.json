[{"body":"from The Computing Zone\nFile management You will need to save each of the tasks in this set in its own file, with a simple naming system:\n1. Three in, three out should be in a file named ex1.py, 2. Name swapper should be in a file named ex2.py and so on.\nYou will be submitting these files to a system which will mark them automatically. Since they’ll be marked by a computer, and computers are terminally stupid, you will need to make sure that your files are labelled correctly, or the computer will assume you haven’t done that particular exercise. You will also need to make sure your output exactly matches the examples, down to capitalisation, spelling, line breaks and spaces.\nYou need to make sure each of your exercises uses this code layout. Replace the included example (which is exercise 2 from the sequence section) with your code.\ndef ex(input,print): # your program goes below here # vvvvvvvvvvvvvvvvvvvvvvvvvvvv print(\"What is your first name?\") fname = input(\"\u003e \") print(\"What is your surname?\") sname = input(\"\u003e \") print(f\"{sname} {fname}\") # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # your program goes above here if __name__ == \"__main__\": ex(input,print) 1. Three in, three out Introduces: print(), input(), variables\nWrite a program that will allow a user to enter their name (string), their age (integer) and their favourite TV program (string). The program will then display the information entered and some additional text on separate lines. An example of the input and output from the program is shown below.\nWhat is your name? \u003e Lister What is your age? \u003e 39 What is your favourite TV program? \u003e Red Dwarf Lister is 39 years old and likes Red Dwarf 2. Name swapper Introduces: string concatenation\nWrite a program that will ask the user to type in their first name and surname. The program will then display the two names in reverse order.\nWhat is your first name? \u003e David What is your surname? \u003e Tennant Tennant David 3. Three in, three out (formatted) Introduces: f-strings\nNow edit program 1 so that the information entered is displayed differently as shown in the output box below. Note - your output will now have to display variables and text together.\nWhat is your name? \u003e Lister What is your age? \u003e 39 What is your favourite TV program? \u003e Red Dwarf Lister 39 Likes watching Red Dwarf 4. Area of a rectangle Introduces: data types, casting, maths operators\nAsk the user to enter the length and width of a rectangle. Your program should calculate the area of the rectangle (length*width) and display the result with a suitable message.\nPlease enter the following values in cm. Please enter the length of the rectangle. \u003e 12 Please enter the width of the rectangle. \u003e 6 The area of the rectangle is: 72 square centimetres 5. Area of a circle Ask your user to enter the radius of a circle. Your program should use what they have entered to calculate the area of the circle \\(A = \\pi r^2\\) and display the result.\nPlease enter the following values in cm. Please enter the radius of the circle. \u003e 16 The area of the circle is: 803.84 square centimetres 6. Number cruncher Write a program that inputs two individual integers between 0 and 9. The program should then combine the inputs to form a single number in a third variable. The program should show the equation of multiplying the three numbers together and the result, as shown in the example.\nEnter the first number (0-9). \u003e 2 Enter the second number (0-9). \u003e 3 2 x 3 x 23 = 138 7. Address formatter A program is required to format and store a users address in a single string. The user should be asked these questions:\nWhat is your house number? What is the name of your street? What suburb/town do you live in? What is your postcode?\nThe program will then combine the user’s answers in a single string, formatted as shown in the example. The program will display the string on the screen.\nWhat is your house number? \u003e 13 What is the name of your street? \u003e Aberlove Drive What suburb/town do you live in? \u003e Buckhaven What is your postcode? \u003e 4039 13 Aberlove Drive BUCKHAVEN 4039 8. Super smart name swapper (extension) Ask the user to enter their full name on one line, and display their name in reverse order.\nWhat is your full name? \u003e David Tennant Tennant David ","categories":"","description":"","excerpt":"from The Computing Zone\nFile management You will need to save each of …","ref":"/9a/assessment/algorithms/1-algorithms/sequence/","tags":"","title":"Sequence"},{"body":"from The Computing Zone\nFile management You will need to save each of the tasks in this set in its own file, with a simple naming system:\n9. Advice please should be in a file named ex9.py, 10. Darts should be in a file named ex10.py and so on.\nYou will be submitting these files to a system which will mark them automatically. Since they’ll be marked by a computer, and computers are terminally stupid, you will need to make sure that your files are labelled correctly, or the computer will assume you haven’t done that particular exercise. You will also need to make sure your output exactly matches the examples, down to capitalisation, spelling, line breaks and spaces.\nYou need to make sure each of your exercises uses this code layout. Replace the included example (which is exercise 2 from the sequence section) with your code.\ndef ex(input,print): # your program goes below here # vvvvvvvvvvvvvvvvvvvvvvvvvvvv print(\"What is your first name?\") fname = input(\"\u003e \") print(\"What is your surname?\") sname = input(\"\u003e \") print(f\"{sname} {fname}\") # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # your program goes above here if __name__ == \"__main__\": ex(input,print) 9. Advice please Write a program that asks the user if they would like some advice. If they enter Y, provide them with an amusing message.\nWould you like some advice? \u003e Y Always know where your towel is. Would you like some advice? \u003e N 10. Darts During a game of darts, the highest score that can be achieved in a single turn is 180. The lowest is 0. Write a program that will allow a dart player to enter their score. The program should congratulate the player if their score was over 100. If the player scores less than 10 they should be told that some practice is required.\nPlease enter your score: \u003e 125 What a great score! Well done. Please enter your score: \u003e 7 That was rubbish. Get practising! 11. Charity Collection Three friends have been collecting money for charity. A local company has offered to double the amount of money they collect if they raise over $1000. Write a program that allows the friends to enter their individual amounts. The program should then add the three amounts and store the total. If the total is greater or equal to $1000 the total should be doubled. Finally the total should be displayed.\nEnter the first amount raised. \u003e 398 Enter the second amount raised. \u003e 193 Enter the third amount raised. \u003e 478 A total of $1069 was raised. This will be doubled to $2138. 12. Solid, Liquid, Gas At normal atmospheric pressure, water is a solid at or below 0°C, a gas above 100°C, and a liquid in the middle. Write a program that will return solid, liquid or gas to the user depending on the temperature they enter.\nEnter the current temperature. \u003e 78 At 78°C, water will be a liquid. ","categories":"","description":"","excerpt":"from The Computing Zone\nFile management You will need to save each of …","ref":"/9a/assessment/algorithms/1-algorithms/selection/","tags":"","title":"Selection"},{"body":"from The Computing Zone\nFile management You will need to save each of the tasks in this set in its own file, with a simple naming system:\n13. Lines cheat should be in a file named ex13.py, 14. Cricket over should be in a file named ex14.py and so on.\nYou will be submitting these files to a system which will mark them automatically. Since they’ll be marked by a computer, and computers are terminally stupid, you will need to make sure that your files are labelled correctly, or the computer will assume you haven’t done that particular exercise. You will also need to make sure your output exactly matches the examples, down to capitalisation, spelling, line breaks and spaces.\nYou need to make sure each of your exercises uses this code layout. Replace the included example (which is exercise 2 from the sequence section) with your code.\ndef ex(input,print): # your program goes below here # vvvvvvvvvvvvvvvvvvvvvvvvvvvv print(\"What is your first name?\") fname = input(\"\u003e \") print(\"What is your surname?\") sname = input(\"\u003e \") print(f\"{sname} {fname}\") # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # your program goes above here if __name__ == \"__main__\": ex(input,print) 13. Lines cheat A naughty pupil has been given lines to copy as a punishment from their Computing teacher. The have been asked to type out “I must not behave like muppet in class” 20 times. Write a program that asks a pupil to enter a sentence. The same sentence should then be displayed 20 times.\nWhat sentence would you like copied? \u003e I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. 14. Cricket over In cricket a bowler bowls 6 balls at a time. This is called an over. Each ball bowled may be hit by the batter who may score some runs. Write a program that allows the runs from an over to be entered (for example: 0, 2, 0, 0, 4, 6). The total scored in that over should then be displayed.\nPlease enter the runs for each ball: \u003e 0 \u003e 2 \u003e 0 \u003e 0 \u003e 4 \u003e 6 This over's score was 12. 15. Flexible cheater The naughty pupil forgot to hand their lines in and now has more to do. Adapt program 13 to allow the pupil to select how many lines the program produces.\nWhat sentence would you like copied? \u003e I must not behave like a muppet in class. How many times would you like it copied? \u003e 7 I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. 16. Charity drive The following year the three friends recruit many more charity raisers. Adapt program 11 to repeatedly ask for the next amount of money raised. If the user types a number, that number is added to the total and the program asks again. If the user just presses Enter, with nothing else, the program stops asking and displays the total raised, including the doubled value if appropriate.\nEnter the total raised by each person: \u003e 238 \u003e 624 \u003e 546 \u003e 333 \u003e 651 \u003e 174 \u003e A total of $2566 was raised. This will be increased to $4566. ## 17. Password The program should give the user an error message if they enter the wrong password. A message “Entry gained!” should be displayed when the password is entered correctly. ```md Please enter the password. \u003e snool Sorry, Incorrect! Try again. Please enter the password. \u003e giraffe Sorry, Incorrect! Try again. Please enter the password. \u003e sesame Entry gained! ## 18. No more presents You have money to spend on your birthday. Write a program that will ask you what you have to spend, and then to enter the price of each present you want until your total reaches or is over the amount you started with. The program should produce the output shown. ```md How much money did you get? \u003e 200 You have $200. Price of next item: \u003e 35 You have $165. Price of next item: \u003e 100 You have $65. Price of next item: \u003e 50 You have $15. Price of next item: \u003e 45 You have overspent! You can't afford the $45 item. How much money did you get? \u003e 48 You have $48. Price of next item: \u003e 48 You have spent all $48! 19. Guess the number A game is created where a user is required to guess an unknown number between 1 and 100 (inclusive). Each time the user guesses the program informs them if their guess is too high, too low or correct. The guessing game only finishes when the user’s guess matches the unknown number.\nI'm thinking of a number between 1 and 100. Which number do you think it is? 45 Your guess is too low. Try again. 86 Your guess is too high. Try again. 67 Your guess is too high. Try again. 50 Your guess is too low. Try again. 54 Your guess is too high. Try again. 52 Correct! I was thinking of 52. 20. Dance group (extension) You have been asked to write a program to store the names and ages of competitors in a dance competition. The program should display the name of the competitor and which level of competition they should be entered in. ‘Junior’ competitors are less than 12 years old, ‘Senior’ competitors are at least 18 years old. ‘Intermediate’ competitors are aged 12-17.\nPlease enter a name: \u003e Jean Gray Please enter Jean Gray's age: \u003e 13 Please enter a name: \u003e Robert Drake Please enter Robert Drake's age: \u003e 24 Please enter a name: \u003e Scott Summers Please enter Scott Summers's age: \u003e 15 Please enter a name: \u003e Anna LeBeau Please enter Anna LeBeau's age: \u003e 9 Please enter a name: \u003e Names and competition list: Jean Gray - Intermediate Robert Drake - Senior Scott Summers - Intermediate Anna LeBeau - Junior ","categories":"","description":"","excerpt":"from The Computing Zone\nFile management You will need to save each of …","ref":"/9a/assessment/algorithms/1-algorithms/iteration/","tags":"","title":"Iteration"},{"body":"","categories":"","description":"","excerpt":"","ref":"/9a/assessment/algorithms/","tags":"","title":"Algorithms"},{"body":"Let’s start with a very simple utility that converts temperatures between °F and °C.\nTo convert from °C to °F and back, here are the steps: $$°C \\to \\times 1.8 \\to +32 \\to °F$$ $$°F \\to -32 \\to \\div 1.8 \\to °C$$\nLet’s get making In our new python document, let’s import the tkinter library, and make our main window.\nimport tkinter as tk root = tk.Tk() root.mainloop() If you run the code now, you’ll see a very featureless window. But it works!\nThinking about what we need We will need a field to enter the temperature into, and a field to display the converted temperature. We’ll also need variables to hold those two numbers. We’ll need a button to convert to C and a button to convert to F, and each will need a function that is called when the button is pressed.\nFor consistency, we’ll settle on these names:\nname function tempIn variable holding input temperature inField field for entering temperature tempOut variable holding output temperature outField field for displaying output toCButton button for converting to °C toC function that converts from °F to °C toFButton button for converting to °F toF function that converts from °C to °F Make the UI elements Let’s add the variables and the user interface elements. These have to go above the root.mainloop() line, as that needs to be the very last line in the program.\ntempIn = tk.DoubleVar(value=-40) inField = tk.Entry(textvariable=tempIn) inField.pack() tempOut = tk.StringVar(value=\"-40°C = -40°F\") outField = tk.Label(textvariable=tempOut) outField.pack() toCButton = tk.Button(text=\"to °C\") toCButton.pack() toFButton = tk.Button(text=\"to °F\") toFButton.pack() At this point we have all the front panel bits we need — we’ll tidy up the layout a bit later!\nWire up the panel Now that the front is more or less in place, we can start writing the code which will connect everything together.\nLet’s start with the function that converts to °F. Put this up the top of your file, just after the import lines.\ndef toF(): global tempIn global tempOut c = tempIn.get() f = c*1.8 + 32 tempOut.set(f\"{c}°C = {f}°F\") Tkinter’s variables (StringVar, DoubleVar, IntVar and so on) wrap Python’s usual types up with some helper stuff to make the GUI process work nicely. As a result, we need to extract the actual temperature value from the variable using the .get() function.\nWe can then do the calculation to convert to °F. Finally, we can .set() the tempOut variable, which will be reflected on the GUI.\nThat takes care of the function, but now we need to make sure it gets called when the button is pressed.\nFind the line that defines toFButton and change it from this:\ntoFButton = tk.Button(text=\"to °F\") to this:\ntoFButton = tk.Button(text=\"to °F\", command=toF) We can now go ahead and repeat the process for converting to °C.\ndef toC(): global tempIn global tempOut f = tempIn.get() c = (f-32)/1.8 tempOut.set(f\"{f}°F = {c}°C\") And similarly, we need to update the toCButton definition to call the function when pressed.\ntoCButton = tk.Button(text=\"to °C\", command=toF) Code so far At this point, our code looks like this:\nimport tkinter as tk def toF(): global tempIn global tempOut c = tempIn.get() f = c*1.8 + 32 tempOut.set(f\"{c}°C = {f}°F\") def toC(): global tempIn global tempOut f = tempIn.get() c = (f-32)/1.8 tempOut.set(f\"{f}°F = {c}°C\") root = tk.Tk() tempIn = tk.DoubleVar(value=-40) inField = tk.Entry(textvariable=tempIn) inField.pack() tempOut = tk.StringVar(value=\"-40°C = -40°F\") outField = tk.Label(textvariable=tempOut) outField.pack() toCButton = tk.Button(text=\"to °C\", command=toC) toCButton.pack() toFButton = tk.Button(text=\"to °F\", command=toF) toFButton.pack() root.mainloop() ","categories":"","description":"","excerpt":"Let’s start with a very simple utility that converts temperatures …","ref":"/9a/appdesign/firstapp/","tags":"","title":"First app"},{"body":"","categories":"","description":"","excerpt":"","ref":"/9a/glossary/","tags":"","title":"Glossary"},{"body":"","categories":"","description":"","excerpt":"","ref":"/9a/appdesign/reference/","tags":"","title":"Reference"},{"body":"Purpose Practice and apply coding skills and computational thinking skills and knowledge in preparation for the individual programming project.\nTask Description Complete and submit each of the exercises in the Sequence, Selection, and Iteration sets.\nFollow this link to hand in your files.\nTo Be Successful Complete and demonstrate the above features with internal comments for all code.\nLearning Behaviours This task provides the following opportunities to develop and demonstrate the Learner Behaviours:\nDriven Engages in all the aspects of the Design Process with initiative and seeks feedback during the development of their project. Curious Explores and tests ideas by asking questions, researching and through trial and error when learning new skills or developing solutions. Collaborative Works in teams to solve problems and create new information. Willingly shares new skills and knowledge and assists others and seeks assistance from peers. Connected Connects programming constructs and data structures to real life applications and is able to explore and discuss issues and ethical implications of their solution. Flexible Thinker Applies new knowledge and skills to solve problems and is able to adapt and recognize patterns in other solutions. Disciplined Motivated learner who demonstrates initiative by following a project management process to complete a project. ","categories":"","description":"","excerpt":"Purpose Practice and apply coding skills and computational thinking …","ref":"/9a/assessment/algorithms/1-algorithms/","tags":"","title":"1: Algorithms Folio"},{"body":" Year 9 Digital Technologies at Thomas More College Assessment App design ","categories":"","description":"","excerpt":" Year 9 Digital Technologies at Thomas More College Assessment App …","ref":"/9a/","tags":"","title":"7 Digital Tech"},{"body":"","categories":"","description":"","excerpt":"","ref":"/9a/appdesign/","tags":"","title":"App design"},{"body":"When calling a function, the values given to it are called arguments. For example, in this case:\ntotal = add(3, 4) 3 and 4 are arguments to the function add().\nWhen defining a function, the pieces of information that the function takes to do its job are called parameters.\n","categories":"","description":"","excerpt":"When calling a function, the values given to it are called arguments. …","ref":"/9a/glossary/argument/","tags":"","title":"argument"},{"body":"","categories":"","description":"","excerpt":"","ref":"/9a/assessment/","tags":"","title":"Assessment"},{"body":"»More details\n","categories":"","description":"","excerpt":"»More details\n","ref":"/9a/appdesign/reference/button/","tags":"","title":"Button"},{"body":"In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.\nColors are described by the amount of red, green, and blue light to emit, using numbers in the range 0 to 255. In Python, we list these as a tuple (red, green, blue), such as:\n(0, 150, 255) The built-in RGB LED on your Gemma (a DotStar) has these three color components, so we set its color in this way.\nThe NeoPixel RGB LEDs you will solder onto your Gemma have four components: the usual red, green, and blue and also white. So you if you wanted the above color on your Neopixel LED strip, you would use:\n(0, 150, 255, 0) Unless you want to set a particular LED pixel to be white in color, it is recommended that you set the white value to zero (0), as the white tends to wash out the colors otherwise.\nYou can use the Google Color Picker to find different colors, and then copy the RGB value listed. Don’t forget to add a value for the white (probably zero) after the other three numbers, if you are setting NeoPixel colors.\n","categories":"","description":"","excerpt":"In almost all programming, American spellings are used. So as …","ref":"/9a/glossary/color/","tags":"","title":"color/colour"},{"body":"»More details\n","categories":"","description":"","excerpt":"»More details\n","ref":"/9a/appdesign/reference/entry/","tags":"","title":"Entry"},{"body":"The Frame widget works like a container to arrange the position of other widgets. It uses rectangular areas in the screen to organize the layout and to provide padding of these widgets.\nf = tk.Frame( master, option, …) » More Details\nimport Tkinter as tk root = tk.Tk() frame = tk.Frame(root) frame.pack() bottomframe = tk.Frame(root) bottomframe.pack( side = tk.BOTTOM ) redbutton = tk.Button(frame, text=\"Red\", fg=\"red\") redbutton.pack( side = tk.LEFT) greenbutton = tk.Button(frame, text=\"Brown\", fg=\"brown\") greenbutton.pack( side = tk.LEFT ) bluebutton = tk.Button(frame, text=\"Blue\", fg=\"blue\") bluebutton.pack( side = tk.LEFT ) blackbutton = tk.Button(bottomframe, text=\"Black\", fg=\"black\") blackbutton.pack( side = tk.BOTTOM) root.mainloop() ","categories":"","description":"","excerpt":"The Frame widget works like a container to arrange the position of …","ref":"/9a/appdesign/reference/frame/","tags":"","title":"Frame"},{"body":"Importing is the process of adding functions from additional libraries to support your program.\nImagine we wish to use the randint() function to choose a random number between 1 and 6, as though we were throwing a single six-sided die.\nThe randint() function is included in the random library, but there are three ways we can import it, and each has its attractions.\nimport 1 2 3 4 import random num = random.randint(1,6) print(num) import as 1 2 3 4 import random as ran num = ran.randint(1,6) print(num) import from 1 2 3 4 from random import randint num = randint(1,6) print(num) ","categories":"","description":"","excerpt":"Importing is the process of adding functions from additional libraries …","ref":"/9a/glossary/import/","tags":"","title":"import"},{"body":"» More details\n","categories":"","description":"","excerpt":"» More details\n","ref":"/9a/appdesign/reference/label/","tags":"","title":"Label"},{"body":"A list is a data structure for storing a series of related pieces of information.\nDefining a list You can define a list using square brackets, with the elements separated by commas, like this:\nsquares = [0, 1, 4, 9, 16, 25, 36] vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"] Selecting elements You can pick an element from the list like this: squares[0]. Note that counting begins at zero. Think of the number as “how far from the beginning” the element in the list is. So vowels[0] is the element at the start of the list, and vowels[3] is three elements further down the list. So the string \"u\" in that list would be vowels[4].\nAdding elements You can add elements to the end of a list with the append() function.\nsquares.append(49) print(squares[7]) # Output: 49 Removing elements You can remove elements from a list with remove() and pop().\nfriends = [\"Nhi\", \"David\", \"Hari\", \"Zahra\"] friends.remove(\"David\") print(friends) # Output: [\"Nhi, \"Hari\", \"Zahra\"] If there are multiple elements in the list with the same value, remove() will remove just the first one.\nfriends = [\"Nhi\", \"David\", \"Hari\", \"Zahra\"] exBestie = friends.pop(0) print(friends) # Output: [\"David\", \"Hari\", \"Zahra\"] print(exBestie) # Output: \"Nhi\" ","categories":"","description":"","excerpt":"A list is a data structure for storing a series of related pieces of …","ref":"/9a/glossary/list/","tags":"","title":"list"},{"body":"When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:\ndef add(first, second): return first + second first and second are the parameters of the function add().\nWhen calling a function, the values given to it are called arguments.\n","categories":"","description":"","excerpt":"When defining a function, the pieces of information that the function …","ref":"/9a/glossary/parameter/","tags":"","title":"parameter"},{"body":"","categories":"","description":"","excerpt":"","ref":"/9a/search/","tags":"","title":"Search Results"},{"body":"A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but when programming Gemma we mostly use them for colors (red, green, blue, white).\n","categories":"","description":"","excerpt":"A tuple is a single unit of data made up of multiple values. In Python …","ref":"/9a/glossary/tuple/","tags":"","title":"tuple"},{"body":"Computers store all information as sequences of numbers, but different kinds of data are encoded in different ways. For example, whole numbers and decimal numbers are stored differently.\nSome common data types you’ll encounter are:\nintegers (int) Integers are whole numbers, and can be positive or negative. floating point numbers (float and double) Floating point numbers (commonly called floats) are for storing decimal numbers. The number is stored in scientific notation, with a mantissa and exponent. $$\\overbrace{3.18}^{\\text{mantissa}}\\times 10^{\\overbrace{-7}^{\\text{exponent}}}$$ There is a limited number of digits for the mantissa and the exponent. If you need more, a double precision floating point number (or double for short) has twice the space, so can store a more precise mantissa, and a larger exponent.\ncharacters (char) A character is a single letter, digit, punctuation mark, or piece of whitespace (a space, newline, tab, etc.). strings (string) Strings are so called because they are ‘strings of characters’. They are usually indicated with double quotes “like this”. In some languages, like Python, strings can be in single quotes as well, ’like this’. ","categories":"","description":"","excerpt":"Computers store all information as sequences of numbers, but different …","ref":"/9a/glossary/type/","tags":"","title":"type"},{"body":"A variable is a named place to store a piece of information.\n","categories":"","description":"","excerpt":"A variable is a named place to store a piece of information.\n","ref":"/9a/glossary/variable/","tags":"","title":"variable"}]